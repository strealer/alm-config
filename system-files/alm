#!/bin/bash
#
# ALM - Autonomous Local Manager CLI
# Device management tool for Strealer edge computing system
#
# Usage: alm <command> [options]
# Commands: register, status, logs, restart, help
#

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $*"
}

log_success() {
    echo -e "${GREEN}✅${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $*"
}

log_error() {
    echo -e "${RED}❌${NC} $*" >&2
}

# Check if running in container
is_in_container() {
    [[ -f /.dockerenv ]] || grep -q docker /proc/1/cgroup 2>/dev/null
}

# Get device IP address
get_device_ip() {
    ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[0-9.]+' || echo "unknown"
}

# Get architecture
get_architecture() {
    local arch
    arch=$(uname -m)
    case "$arch" in
        aarch64|arm64) echo "ARM64" ;;
        x86_64|amd64) echo "AMD64" ;;
        *) echo "$arch" ;;
    esac
}

# Detect container suffix based on architecture
get_container_suffix() {
    local arch
    arch=$(uname -m)
    if [[ "$arch" == "aarch64" ]] || [[ "$arch" == "arm64" ]]; then
        echo "arm64"
    else
        echo "amd64"
    fi
}

#
# Command: alm register
# Interactive device registration with init container
#
cmd_register() {
    local auto_mode=false

    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --auto)
                auto_mode=true
                shift
                ;;
            --help|-h)
                cat <<EOF
Usage: alm register [OPTIONS]

Interactive device registration using init container web interface.

Options:
  --auto    Non-interactive mode (show URL and exit)
  --help    Show this help message

Description:
  1. Detects if device needs registration (init container running)
  2. Waits for init container API to be ready (auto-retry)
  3. Displays QR code and registration URL
  4. Waits for user to complete web registration
  5. Monitors main container startup
  6. Shows success message when complete

Examples:
  alm register              # Interactive registration with prompts
  alm register --auto       # Show URL only, don't wait for user
EOF
                return 0
                ;;
            *)
                log_error "Unknown option: $1"
                echo "Use 'alm register --help' for usage information"
                return 1
                ;;
        esac
    done

    local suffix
    suffix=$(get_container_suffix)

    # Check if init container is running
    local init_running
    init_running=$(docker ps --filter "name=alm_init_${suffix}" --filter "status=running" --format "{{.Names}}" 2>/dev/null || true)

    if [[ -z "$init_running" ]]; then
        log_warning "Init container is not running."
        echo ""
        echo "This usually means:"
        echo "  • Device is already registered (main container running)"
        echo "  • Docker service is not running"
        echo "  • Containers haven't been started yet"
        echo ""
        echo "Try: alm status"
        return 1
    fi

    # Check if main container is already running
    local main_running
    main_running=$(docker ps --filter "name=alm_${suffix}" --filter "status=running" --format "{{.Names}}" 2>/dev/null || true)

    if [[ -n "$main_running" ]]; then
        log_success "Device is already registered! Main container is running."
        echo ""
        echo "Service URL: http://$(get_device_ip):80"
        return 0
    fi

    log_info "Init container detected, preparing registration..."
    echo ""

    # Wait for registration API with retry logic
    local url=""
    local attempts=0
    local max_attempts=3

    while [[ $attempts -lt $max_attempts ]]; do
        url=$(curl -sf --max-time 2 http://localhost:8080/api/register-link 2>/dev/null | jq -r '.registration_url' 2>/dev/null || true)

        if [[ -n "$url" && "$url" != "null" ]]; then
            break
        fi

        if [[ $attempts -eq 0 ]]; then
            log_info "Waiting for init container API to be ready..."
        fi

        attempts=$((attempts + 1))

        if [[ $attempts -lt $max_attempts ]]; then
            sleep 2
        fi
    done

    # Check if we got a valid URL
    if [[ -z "$url" || "$url" == "null" ]]; then
        log_error "Registration API not available after $max_attempts attempts."
        echo ""
        echo "Troubleshooting:"
        echo "  1. Check init container logs: alm logs init"
        echo "  2. Verify container health: docker ps"
        echo "  3. Try restarting service: alm restart"
        echo "  4. Wait 30 seconds and try again"
        return 1
    fi

    # Display registration information
    echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}Device Registration Required${NC}                             ${CYAN}║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""

    # Generate and display QR code
    if command -v qrencode >/dev/null 2>&1; then
        qrencode -t ANSIUTF8 "$url"
        echo ""
    fi

    echo -e "${YELLOW}Registration URL:${NC} $url"
    echo ""

    if [[ "$auto_mode" == true ]]; then
        log_info "Auto mode: Registration URL displayed. Exiting."
        return 0
    fi

    # Interactive prompt with prominent instructions
    echo -e "${BLUE}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}  ${YELLOW}IMPORTANT: Complete registration before continuing${NC}        ${BLUE}║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "  1. Open the URL above in your browser (or scan QR code)"
    echo -e "  2. Fill out the device registration form"
    echo -e "  3. Submit the form and wait for confirmation"
    echo -e "  4. ${YELLOW}Only then${NC} return here and press Enter"
    echo ""

    # Wait for user confirmation
    while true; do
        read -r -p "Have you completed the registration? [y/n]: " response

        case "$response" in
            [Yy]*)
                break
                ;;
            [Nn]*)
                echo ""
                log_info "Please complete the registration in your browser first."
                echo ""
                ;;
            *)
                echo "Please answer 'y' for yes or 'n' for no."
                ;;
        esac
    done

    echo ""
    log_info "Verifying registration completion..."
    echo ""

    # Get authKey from init container to check backend
    local auth_key=""
    auth_key=$(docker exec "alm_init_${suffix}" cat /opt/alm/persist/alm_keys.json 2>/dev/null | grep -o '"authKey":"[^"]*"' | cut -d'"' -f4 || true)

    if [[ -z "$auth_key" ]]; then
        log_error "Could not read authKey from init container"
        echo "The container may not be ready yet. Try again in a few seconds."
        return 1
    fi

    # Check backend API directly to verify registration
    log_info "Checking registration status with backend..."
    local backend_check
    backend_check=$(curl -s --max-time 5 \
        -H "x-api-key: cwSL8sAAiT7QWyvMulL4f6Mtmet7klzV" \
        "http://public-staging.strealer.io/alm/auth-key-check?ak=${auth_key}&type=registered" 2>/dev/null || echo "0")

    if [[ "$backend_check" != "1" ]]; then
        log_error "Registration not completed on backend"
        echo ""
        echo "The backend shows registration is NOT complete."
        echo "Please make sure you:"
        echo "  1. Opened the registration URL in your browser"
        echo "  2. Filled out and submitted the form"
        echo "  3. Saw a success confirmation"
        echo ""
        echo "Registration URL: $url"
        echo ""
        echo "Try again after completing registration."
        return 1
    fi

    log_success "Registration confirmed on backend!"
    echo ""

    # Check if init container has already exited
    local init_status
    init_status=$(docker ps -a --filter "name=alm_init_${suffix}" --format "{{.Status}}" 2>/dev/null | head -1 || true)

    if echo "$init_status" | grep -q "Up"; then
        log_info "Init container still running - stopping it to proceed with main container..."

        # Force stop init container since registration is confirmed
        sudo docker stop "alm_init_${suffix}" 2>/dev/null || true
        sleep 2

        log_success "Init container stopped"
    fi

    echo ""
    log_info "Starting main container..."
    echo ""

    # Start main container via docker compose
    cd /opt/alm || { log_error "Could not change to /opt/alm directory"; return 1; }

    if ! sudo docker compose up -d "alm_${suffix}"; then
        log_error "Failed to start main container"
        echo ""
        echo "Try manually:"
        echo "  cd /opt/alm"
        echo "  sudo docker compose up -d alm_${suffix}"
        return 1
    fi

    # Monitor main container startup with timeout
    local timeout=60  # 1 minute should be enough
    local elapsed=0
    local check_interval=2

    while [[ $elapsed -lt $timeout ]]; do

        # Check if main container is running
        main_running=$(docker ps --filter "name=alm_${suffix}" --filter "status=running" --format "{{.Names}}" 2>/dev/null || true)

        if [[ -n "$main_running" ]]; then
            echo ""
            log_success "Main container is running!"
            echo ""
            echo -e "${GREEN}Service URL:${NC} http://$(get_device_ip):80"
            echo ""
            return 0
        fi

        sleep $check_interval
        elapsed=$((elapsed + check_interval))

        # Progress indicator every 10 seconds
        if (( elapsed % 10 == 0 )); then
            echo -n "."
        fi

        # Show helpful message at 30 seconds
        if [[ $elapsed -eq 30 ]]; then
            echo ""
            echo ""
            log_warning "Still waiting... Make sure you completed the registration form!"
            echo "Registration URL: $(curl -sf http://localhost:8080/api/register-link 2>/dev/null | jq -r '.registration_url' || echo 'check above')"
            echo ""
            echo "If you've completed registration but it's stuck, you can:"
            echo "  1. Press Ctrl+C to cancel this"
            echo "  2. Run: alm start-main"
            echo ""
        fi
    done

    # Timeout reached
    echo ""
    echo ""
    log_error "Timeout: Main container didn't start within ${timeout} seconds"
    echo ""
    echo "Possible reasons:"
    echo "  • Registration form not submitted in browser"
    echo "  • Init container stuck or failed"
    echo "  • Network or API issues"
    echo ""
    echo "Check status:"
    echo "  alm status"
    echo "  alm logs init"
    echo ""
    echo "Or reset and try again:"
    echo "  alm reset"

    return 1
}

#
# Command: alm status
# Show device and container status
#
cmd_status() {
    if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
        cat <<EOF
Usage: alm status

Display device information and container status.

Shows:
  • Device IP address and hostname
  • System architecture (ARM64/AMD64)
  • Docker service status
  • Init container status
  • Main container status
  • Service accessibility

Examples:
  alm status
EOF
        return 0
    fi

    local ip
    local hostname
    local arch
    local suffix

    ip=$(get_device_ip)
    hostname=$(hostname)
    arch=$(get_architecture)
    suffix=$(get_container_suffix)

    echo -e "${CYAN}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}ALM Device Status${NC}                                        ${CYAN}║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""

    echo -e "${BLUE}Device Information:${NC}"
    echo "  IP Address:   $ip"
    echo "  Hostname:     $hostname"
    echo "  Architecture: $arch"
    echo ""

    echo -e "${BLUE}Docker Service:${NC}"
    if systemctl is-active --quiet docker 2>/dev/null; then
        log_success "Docker is running"
    else
        log_error "Docker is not running"
        echo "  Start with: sudo systemctl start docker"
        return 1
    fi
    echo ""

    echo -e "${BLUE}Container Status:${NC}"

    # Check init container
    local init_status
    init_status=$(docker ps -a --filter "name=alm_init_${suffix}" --format "{{.Status}}" 2>/dev/null | head -1 || true)

    if [[ -n "$init_status" ]]; then
        if echo "$init_status" | grep -q "Up"; then
            log_success "Init container: Running"
            echo "    Port 8080: Registration web interface"
        else
            log_info "Init container: $init_status"
        fi
    else
        log_warning "Init container: Not found"
    fi

    # Check main container
    local main_status
    main_status=$(docker ps -a --filter "name=alm_${suffix}" --format "{{.Status}}" 2>/dev/null | head -1 || true)

    if [[ -n "$main_status" ]]; then
        if echo "$main_status" | grep -q "Up"; then
            log_success "Main container: Running"
            echo "    Port 80: Application service"
            echo ""
            echo -e "${GREEN}Service URL:${NC} http://$ip:80"
        else
            log_info "Main container: $main_status"
        fi
    else
        log_warning "Main container: Not found (device may need registration)"
        echo "    Run: alm register"
    fi

    echo ""
}

#
# Command: alm logs
# Follow container logs
#
cmd_logs() {
    local container_type="main"
    local follow=true
    local tail_lines=50

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            init|main)
                container_type="$1"
                shift
                ;;
            --no-follow|-n)
                follow=false
                shift
                ;;
            --tail)
                tail_lines="$2"
                shift 2
                ;;
            --help|-h)
                cat <<EOF
Usage: alm logs [CONTAINER] [OPTIONS]

Follow container logs in real-time.

Arguments:
  CONTAINER    Container to show logs for: init, main (default: main)

Options:
  --no-follow  Show logs without following (exit after display)
  --tail N     Number of lines to show (default: 50)
  --help       Show this help message

Examples:
  alm logs              # Follow main container logs
  alm logs init         # Follow init container logs
  alm logs --tail 100   # Show last 100 lines
  alm logs init -n      # Show init logs without following
EOF
                return 0
                ;;
            *)
                log_error "Unknown option: $1"
                echo "Use 'alm logs --help' for usage information"
                return 1
                ;;
        esac
    done

    local suffix
    suffix=$(get_container_suffix)

    local container_name
    if [[ "$container_type" == "init" ]]; then
        container_name="alm_init_${suffix}"
    else
        container_name="alm_${suffix}"
    fi

    # Check if container exists
    if ! docker ps -a --filter "name=^${container_name}$" --format "{{.Names}}" 2>/dev/null | grep -q "^${container_name}$"; then
        log_error "Container '$container_name' not found"
        echo ""
        echo "Available containers:"
        docker ps -a --filter "name=alm" --format "  • {{.Names}} ({{.Status}})"
        return 1
    fi

    log_info "Showing logs for: $container_name"
    echo ""

    if [[ "$follow" == true ]]; then
        docker logs -f --tail "$tail_lines" "$container_name"
    else
        docker logs --tail "$tail_lines" "$container_name"
    fi
}

#
# Command: alm restart
# Restart ALM service
#
cmd_restart() {
    if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
        cat <<EOF
Usage: alm restart

Restart the ALM systemd service.

This will:
  1. Stop all running containers
  2. Pull latest container images
  3. Start containers based on architecture
  4. Show updated status

Requires: sudo privileges

Examples:
  alm restart
EOF
        return 0
    fi

    log_info "Restarting ALM service..."
    echo ""

    if ! command -v systemctl >/dev/null 2>&1; then
        log_error "systemctl not found. This command requires systemd."
        return 1
    fi

    if ! sudo systemctl restart strealer-container.service; then
        log_error "Failed to restart service"
        echo ""
        echo "Check service status:"
        echo "  sudo systemctl status strealer-container.service"
        echo "  sudo journalctl -u strealer-container.service -n 50"
        return 1
    fi

    log_success "Service restarted successfully"
    echo ""

    log_info "Waiting for containers to start..."
    sleep 5

    echo ""
    cmd_status
}

#
# Command: alm reset
# Reset device to allow fresh registration
#
cmd_reset() {
    if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
        cat <<EOF
Usage: alm reset

Reset the ALM device to start fresh registration.

${RED}WARNING: This will:${NC}
  1. Stop and remove all containers
  2. Delete all configuration and registration data
  3. Remove Docker volumes
  4. Restart service for fresh setup

Use this when:
  • Registration is stuck or incomplete
  • Need to re-register the device
  • Want to start configuration from scratch

Requires: sudo privileges

Examples:
  alm reset
EOF
        return 0
    fi

    echo -e "${RED}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║${NC}  ${YELLOW}WARNING: This will delete all ALM data and config${NC}         ${RED}║${NC}"
    echo -e "${RED}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo "This will:"
    echo "  • Stop all running containers"
    echo "  • Remove all containers and volumes"
    echo "  • Delete registration and configuration data"
    echo "  • Reset device to fresh state"
    echo ""

    read -r -p "Are you sure you want to reset? [y/N]: " response

    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        log_info "Reset cancelled"
        return 0
    fi

    echo ""
    log_info "Stopping ALM service..."
    sudo systemctl stop strealer-container.service 2>/dev/null || true

    echo ""
    log_info "Removing containers..."

    local suffix
    suffix=$(get_container_suffix)

    # Stop and remove containers
    sudo docker stop "alm_init_${suffix}" 2>/dev/null || true
    sudo docker stop "alm_${suffix}" 2>/dev/null || true
    sudo docker rm "alm_init_${suffix}" 2>/dev/null || true
    sudo docker rm "alm_${suffix}" 2>/dev/null || true

    echo ""
    log_info "Removing Docker volumes..."

    # Remove volumes
    cd /opt/alm 2>/dev/null || true
    sudo docker compose down -v 2>/dev/null || true

    # Clean up any orphaned volumes
    sudo docker volume ls -q | grep -E "alm_config|alm_persist" | xargs -r sudo docker volume rm 2>/dev/null || true

    echo ""
    log_success "Reset complete!"
    echo ""
    log_info "Starting init container..."

    # Start init container directly (faster than systemctl, handles race conditions)
    cd /opt/alm

    # Detect architecture
    local arch
    arch=$(uname -m)
    local init_container="alm_init_arm64"
    if [[ "$arch" != "aarch64" && "$arch" != "arm64" ]]; then
        init_container="alm_init_amd64"
    fi

    # Pull and start init container (idempotent - safe even if service also starts it)
    sudo docker compose pull "$init_container" 2>&1 | grep -v "Pulling" || true
    sudo docker compose up -d --remove-orphans "$init_container"

    echo ""
    log_info "Waiting for init container to be ready..."

    # Wait for init container to be healthy
    local timeout=60
    local elapsed=0
    local container_ready=false

    while [[ $elapsed -lt $timeout ]]; do
        if sudo docker ps --filter "name=alm_init" --filter "health=healthy" --format "{{.Names}}" | grep -q "alm_init"; then
            container_ready=true
            break
        fi
        sleep 2
        elapsed=$((elapsed + 2))
        if (( elapsed % 10 == 0 )); then
            echo -n "."
        fi
    done
    echo ""

    if [[ "$container_ready" == "false" ]]; then
        log_error "Init container failed to start"
        log_info "Check logs with: sudo docker logs $init_container"
        return 1
    fi

    echo ""
    log_success "Device reset successfully!"
    echo ""
    echo "Init container ready at http://$(get_device_ip):8080"
    echo ""
    echo "Next steps:"
    echo "  1. Run: alm register"
    echo "  2. Complete registration in browser"
    echo "  3. Done!"
}

#
# Command: alm start-main
# Force start main container (workaround for init container not exiting)
#
cmd_start_main() {
    if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
        cat <<EOF
Usage: alm start-main

Force start the main ALM container, bypassing init container dependency.

${YELLOW}Use this when:${NC}
  • Registration is complete but init container won't exit
  • Main container won't start automatically
  • Init container appears stuck

This command:
  1. Stops init container
  2. Starts main container directly
  3. Shows service status

${RED}WARNING:${NC} Only use after completing registration!

Examples:
  alm start-main
EOF
        return 0
    fi

    local suffix
    suffix=$(get_container_suffix)

    echo -e "${YELLOW}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${YELLOW}║${NC}  Force starting main container (bypassing init)            ${YELLOW}║${NC}"
    echo -e "${YELLOW}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""

    log_info "Stopping init container..."
    sudo docker stop "alm_init_${suffix}" 2>/dev/null || true
    sudo docker rm "alm_init_${suffix}" 2>/dev/null || true

    echo ""
    log_info "Starting main container..."

    cd /opt/alm || { log_error "/opt/alm not found"; return 1; }

    # Start main container without dependency check
    if ! sudo docker compose up -d --no-deps "alm_${suffix}"; then
        log_error "Failed to start main container"
        return 1
    fi

    echo ""
    log_info "Waiting for main container to be ready..."
    sleep 5

    # Check if running
    if docker ps --filter "name=alm_${suffix}" --filter "status=running" -q | grep -q .; then
        echo ""
        log_success "Main container is running!"
        echo ""
        echo -e "${GREEN}Service URL:${NC} http://$(get_device_ip):80"
        echo ""
        return 0
    else
        echo ""
        log_error "Main container failed to start"
        echo ""
        echo "Check logs with: alm logs main"
        return 1
    fi
}

#
# Command: alm help
# Show usage information
#
cmd_help() {
    cat <<EOF
${CYAN}ALM - Autonomous Local Manager CLI${NC}

Device management tool for Strealer edge computing system.

${BLUE}Usage:${NC}
  alm <command> [options]

${BLUE}Commands:${NC}
  ${GREEN}register${NC}     Interactive device registration via web interface
  ${GREEN}status${NC}       Show device and container status
  ${GREEN}logs${NC}         Follow container logs in real-time
  ${GREEN}restart${NC}      Restart ALM service
  ${GREEN}reset${NC}        Reset device for fresh registration (deletes all data)
  ${GREEN}start-main${NC}   Force start main container (if registration stuck)
  ${GREEN}help${NC}         Show this help message

${BLUE}Examples:${NC}
  alm register          # Start interactive device registration
  alm status            # Check device and container status
  alm logs init         # View init container logs
  alm logs main         # View main container logs
  alm restart           # Restart ALM service
  alm reset             # Reset device to start fresh

${BLUE}Get Help for Specific Commands:${NC}
  alm register --help
  alm logs --help
  alm restart --help
  alm reset --help

${BLUE}Quick Start:${NC}
  1. SSH into device
  2. Run: alm register
  3. Open displayed URL in browser
  4. Complete registration form
  5. Press Enter in terminal
  6. Done! Service running at http://<device-ip>:80

${BLUE}Troubleshooting:${NC}
  • Check status:       alm status
  • View logs:          alm logs
  • Restart service:    alm restart
  • Service status:     sudo systemctl status strealer-container.service
  • Docker status:      sudo systemctl status docker

${BLUE}Service Ports:${NC}
  • 8080: Registration web interface (init container)
  • 80:   Main application service (after registration)

For more information, visit: https://github.com/strealer/alm-config
EOF
}

#
# Main command dispatcher
#
main() {
    # Check if no arguments provided
    if [[ $# -eq 0 ]]; then
        cmd_help
        return 0
    fi

    local command="$1"
    shift

    case "$command" in
        register)
            cmd_register "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        reset)
            cmd_reset "$@"
            ;;
        start-main)
            cmd_start_main "$@"
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            log_error "Unknown command: $command"
            echo ""
            echo "Run 'alm help' to see available commands"
            return 1
            ;;
    esac
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
