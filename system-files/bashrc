# ~/.bashrc: executed by bash(1) for non‑login shells
# --------------------------------------------------------------------------- #
# 0. Bail out early if the shell is non‑interactive
case $- in
    *i*) ;;                 # interactive shell
      *) return;;
esac

###############################################################################
# Standard Debian settings (kept intact)
###############################################################################
HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

###############################################################################
# xxxxxxxxx  Custom enhancements for ALM Raspberry‑Pi nodes  xxxxxxxxx
###############################################################################
# Abort here if somehow reached via non‑interactive shell (double‑safety)
[[ $- != *i* ]] && return

# 1. Paths
export PATH="$HOME/.local/bin:/opt/alm/bin:$PATH"

# 2. Robust, timestamped, cross‑session history
export HISTSIZE=5000
export HISTFILESIZE=10000
export HISTTIMEFORMAT="%F %T "
__alm_history_sync() { builtin history -a; builtin history -c; builtin history -r; }
PROMPT_COMMAND="__alm_history_sync${PROMPT_COMMAND:+;$PROMPT_COMMAND}"

# 3. Safer core utilities
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -Iv --one-file-system'
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'

# 4. Listing helpers
alias ll='ls -alFh --group-directories-first --color=auto'
alias la='ls -A'
alias l='ls -CF'
alias tree='tree -C'

# 5. Navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
up()   { local n=${1:-1}; while ((n--)); do cd ..; done; }
mkcd() { mkdir -p -- "$1" && cd -- "$1"; }

# 6. Smart archive extractor
extract() {
  local f=$1; [[ -f $f ]] || { echo "$f: not found"; return 1; }
  case $f in
    *.tar.bz2)   tar xjf "$f" ;;
    *.tar.gz)    tar xzf "$f" ;;
    *.tar.xz)    tar xJf "$f" ;;
    *.bz2)       bunzip2  "$f" ;;
    *.rar)       unrar x  "$f" ;;
    *.gz)        gunzip   "$f" ;;
    *.tar)       tar xf   "$f" ;;
    *.tbz2)      tar xjf  "$f" ;;
    *.tgz)       tar xzf  "$f" ;;
    *.zip)       unzip    "$f" ;;
    *.7z)        7z x     "$f" ;;
    *)           echo "$f: unsupported"; return 2 ;;
  esac
}

# 7. Convenience helpers
please() { sudo "$(history -p '!!')"; }
timer()  { local s=$(date +%s); "$@"; printf '\n⏱  %s s elapsed\n' $(( $(date +%s) - s )); }

# 8. Raspberry‑Pi telemetry
alias rpi-temp='printf "CPU: %.1f °C\n" "$(awk "{print \$1/1000}" /sys/class/thermal/thermal_zone0/temp)"'
alias rpi-power='vcgencmd get_throttled'
alias rpi-watch='watch -n 2 "vcgencmd measure_temp; vcgencmd get_throttled"'

# 9. Network shortcuts
alias myip='hostname -I | awk "{print \$1}"'
alias ports='ss -tuln'

# 10. Git branch/status in prompt
if command -v __git_ps1 >/dev/null 2>&1; then
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWUPSTREAM="auto"
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w$(__git_ps1 " (%s)") \$\[\033[00m\] '
fi

# 11. Coloured man pages
man() {
  env LESS_TERMCAP_mb=$'\e[1;31m' \
      LESS_TERMCAP_md=$'\e[1;31m' \
      LESS_TERMCAP_me=$'\e[0m'  \
      LESS_TERMCAP_se=$'\e[0m'  \
      LESS_TERMCAP_so=$'\e[1;44;33m' \
      LESS_TERMCAP_ue=$'\e[0m'  \
      LESS_TERMCAP_us=$'\e[1;32m' \
      command man "$@"
}

# 12. Modular per‑user snippets
if [[ -d $HOME/.bashrc.d ]]; then
  for rc in "$HOME"/.bashrc.d/*.bash; do
    [[ -r $rc ]] && source "$rc"
  done
fi

# 13. Less intrusive bell
set bell-style visible

###############################################################################
# Containerized ALM - Smart Registration Helper
###############################################################################

# Interactive registration check on login
alm_registration_check() {
  # Silently check if we're in the right state
  if command -v docker >/dev/null 2>&1 && command -v jq >/dev/null 2>&1 && command -v qrencode >/dev/null 2>&1; then
    # Check if init container is running
    local init_running=$(docker ps --filter "name=alm_init" --filter "status=running" -q 2>/dev/null)
    # Check if main container is NOT running (not yet registered)
    local main_running=$(docker ps --filter "name=alm_arm64" --filter "status=running" -q 2>/dev/null)

    if [[ -n "$init_running" && -z "$main_running" ]]; then
      echo ""
      echo "╔════════════════════════════════════════════════════════════════════╗"
      echo "║  🚀 ALM Device Registration Required                              ║"
      echo "╚════════════════════════════════════════════════════════════════════╝"
      echo ""

      # Try to fetch registration URL with retry logic
      local url=""
      local attempts=0
      local max_attempts=3

      while [[ $attempts -lt $max_attempts ]]; do
        url=$(curl -sf --max-time 2 http://localhost:8080/api/register-link 2>/dev/null | jq -r '.registration_url' 2>/dev/null)

        if [[ -n "$url" && "$url" != "null" ]]; then
          break
        fi

        if [[ $attempts -eq 0 ]]; then
          echo "⏳ Init container starting, waiting for registration API..."
        fi

        attempts=$((attempts + 1))
        [[ $attempts -lt $max_attempts ]] && sleep 2
      done

      if [[ -n "$url" && "$url" != "null" ]]; then
        echo "📱 Scan QR code or open URL to register this device:"
        echo ""
        qrencode -t UTF8i "$url" 2>/dev/null || echo "$url"
        echo ""
        echo "🔗 Registration URL: $url"
        echo ""

        # Make it interactive - wait for user
        read -p "✋ Open the URL in your browser, complete registration, then press Enter..."

        echo ""
        echo "⏳ Waiting for main container to start..."

        local timeout=60
        local elapsed=0
        while [[ $elapsed -lt $timeout ]]; do
          local main_check=$(docker ps --filter "name=alm_arm64" --filter "status=running" -q 2>/dev/null)
          if [[ -n "$main_check" ]]; then
            local device_ip=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[0-9.]+')
            echo ""
            echo "╔════════════════════════════════════════════════════════════════════╗"
            echo "║  🎉 Registration Complete!                                        ║"
            echo "╚════════════════════════════════════════════════════════════════════╝"
            echo ""
            echo "🌐 Main service running at: http://${device_ip}:80"
            echo "📊 Check logs: docker logs -f alm_arm64"
            echo ""
            return 0
          fi
          sleep 2
          elapsed=$((elapsed + 2))
        done

        echo ""
        echo "⚠️  Main container didn't start. Check status with:"
        echo "   docker compose ps"
        echo "   docker logs alm_init_arm64"
        echo ""
        echo "💡 Or run 'alm-register' to try again"
        echo ""
      else
        echo "⚠️  Could not reach registration API. Try running 'alm-register' in a moment"
        echo ""
      fi
    fi
  fi
}

# Interactive registration helper command
alm-register() {
  if ! command -v docker >/dev/null 2>&1; then
    echo "❌ Docker not installed"
    return 1
  fi

  if ! command -v jq >/dev/null 2>&1; then
    echo "⚠️  Installing jq for JSON parsing..."
    sudo apt-get update -qq && sudo apt-get install -y jq
  fi

  if ! command -v qrencode >/dev/null 2>&1; then
    echo "⚠️  Installing qrencode for QR codes..."
    sudo apt-get update -qq && sudo apt-get install -y qrencode
  fi

  echo "🔍 Checking registration status..."

  local init_running=$(docker ps --filter "name=alm_init" --filter "status=running" -q)
  local main_running=$(docker ps --filter "name=alm_arm64" --filter "status=running" -q)

  if [[ -n "$main_running" ]]; then
    echo "✅ Device already registered and running!"
    local device_ip=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[0-9.]+')
    echo "🌐 Main service: http://${device_ip}:80"
    return 0
  fi

  if [[ -z "$init_running" ]]; then
    echo "❌ Init container not running. Starting containers..."
    cd /opt/alm 2>/dev/null || { echo "❌ /opt/alm not found"; return 1; }

    local arch=$(uname -m)
    if [[ "$arch" == "aarch64" || "$arch" == "arm64" ]]; then
      sudo docker compose up -d alm_arm64
    else
      sudo docker compose up -d alm_amd64
    fi

    echo "⏳ Waiting for init container to start..."
    sleep 5
  fi

  echo ""
  echo "📡 Fetching registration URL..."
  local url=$(curl -sf --max-time 5 http://localhost:8080/api/register-link | jq -r '.registration_url')

  if [[ -z "$url" || "$url" == "null" ]]; then
    echo "❌ Could not fetch registration URL. Check if init container is healthy:"
    echo "   docker logs alm_init_arm64"
    return 1
  fi

  echo ""
  echo "╔════════════════════════════════════════════════════════════════════╗"
  echo "║  📱 Scan QR Code or Open URL                                      ║"
  echo "╚════════════════════════════════════════════════════════════════════╝"
  echo ""
  qrencode -t UTF8i "$url"
  echo ""
  echo "🔗 $url"
  echo ""
  read -p "✋ Complete registration in browser, then press Enter to continue..."

  echo ""
  echo "📤 Submitting registration..."
  curl -sf -X POST http://localhost:8080/api/register | jq . || {
    echo "⚠️  Registration submission failed. Check browser for status."
  }

  echo ""
  echo "⏳ Waiting for main container to start..."
  local timeout=60
  local elapsed=0

  while [[ $elapsed -lt $timeout ]]; do
    if docker ps --filter "name=alm_arm64" --filter "status=running" -q | grep -q .; then
      echo "✅ Main container is running!"
      local device_ip=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K[0-9.]+')
      echo ""
      echo "╔════════════════════════════════════════════════════════════════════╗"
      echo "║  🎉 Registration Complete!                                        ║"
      echo "╚════════════════════════════════════════════════════════════════════╝"
      echo ""
      echo "🌐 Main service: http://${device_ip}:80"
      echo "📊 Check logs: docker logs -f alm_arm64"
      echo ""
      return 0
    fi
    sleep 2
    elapsed=$((elapsed + 2))
  done

  echo "⏰ Timeout waiting for main container. Check status:"
  echo "   docker compose ps"
  echo "   docker logs alm_init_arm64"
}

# Show registration check on login (only for interactive shells)
if [[ $- == *i* ]] && [[ -z "$ALM_REG_CHECK_DONE" ]]; then
  export ALM_REG_CHECK_DONE=1
  alm_registration_check
fi
