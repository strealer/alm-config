# ~/.bashrc: executed by bash(1) for non‑login shells
# --------------------------------------------------------------------------- #
# 0. Bail out early if the shell is non‑interactive
case $- in
    *i*) ;;                 # interactive shell
      *) return;;
esac

###############################################################################
# Standard Debian settings (kept intact)
###############################################################################
HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

force_color_prompt=yes
if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

###############################################################################
# xxxxxxxxx  Custom enhancements for ALM Raspberry‑Pi nodes  xxxxxxxxx
###############################################################################
# Abort here if somehow reached via non‑interactive shell (double‑safety)
[[ $- != *i* ]] && return

# 1. Paths
export PATH="$HOME/.local/bin:/opt/alm/bin:$PATH"

# 2. Robust, timestamped, cross‑session history
export HISTSIZE=5000
export HISTFILESIZE=10000
export HISTTIMEFORMAT="%F %T "
__alm_history_sync() { builtin history -a; builtin history -c; builtin history -r; }
PROMPT_COMMAND="__alm_history_sync${PROMPT_COMMAND:+;$PROMPT_COMMAND}"

# 3. Safer core utilities
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -Iv --one-file-system'
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'

# 4. Listing helpers
alias ll='ls -alFh --group-directories-first --color=auto'
alias la='ls -A'
alias l='ls -CF'
alias tree='tree -C'

# 5. Navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
up()   { local n=${1:-1}; while ((n--)); do cd ..; done; }
mkcd() { mkdir -p -- "$1" && cd -- "$1"; }

# 6. Smart archive extractor
extract() {
  local f=$1; [[ -f $f ]] || { echo "$f: not found"; return 1; }
  case $f in
    *.tar.bz2)   tar xjf "$f" ;;
    *.tar.gz)    tar xzf "$f" ;;
    *.tar.xz)    tar xJf "$f" ;;
    *.bz2)       bunzip2  "$f" ;;
    *.rar)       unrar x  "$f" ;;
    *.gz)        gunzip   "$f" ;;
    *.tar)       tar xf   "$f" ;;
    *.tbz2)      tar xjf  "$f" ;;
    *.tgz)       tar xzf  "$f" ;;
    *.zip)       unzip    "$f" ;;
    *.7z)        7z x     "$f" ;;
    *)           echo "$f: unsupported"; return 2 ;;
  esac
}

# 7. Convenience helpers
please() { sudo "$(history -p '!!')"; }
timer()  { local s=$(date +%s); "$@"; printf '\n⏱  %s s elapsed\n' $(( $(date +%s) - s )); }

# 8. Raspberry‑Pi telemetry
alias rpi-temp='printf "CPU: %.1f °C\n" "$(awk "{print \$1/1000}" /sys/class/thermal/thermal_zone0/temp)"'
alias rpi-power='vcgencmd get_throttled'
alias rpi-watch='watch -n 2 "vcgencmd measure_temp; vcgencmd get_throttled"'

# 9. Network shortcuts
alias myip='hostname -I | awk "{print \$1}"'
alias ports='ss -tuln'

# 10. Git branch/status in prompt
if command -v __git_ps1 >/dev/null 2>&1; then
  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=1
  GIT_PS1_SHOWUNTRACKEDFILES=1
  GIT_PS1_SHOWUPSTREAM="auto"
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w$(__git_ps1 " (%s)") \$\[\033[00m\] '
fi

# 11. Coloured man pages
man() {
  env LESS_TERMCAP_mb=$'\e[1;31m' \
      LESS_TERMCAP_md=$'\e[1;31m' \
      LESS_TERMCAP_me=$'\e[0m'  \
      LESS_TERMCAP_se=$'\e[0m'  \
      LESS_TERMCAP_so=$'\e[1;44;33m' \
      LESS_TERMCAP_ue=$'\e[0m'  \
      LESS_TERMCAP_us=$'\e[1;32m' \
      command man "$@"
}

# 12. Modular per‑user snippets
if [[ -d $HOME/.bashrc.d ]]; then
  for rc in "$HOME"/.bashrc.d/*.bash; do
    [[ -r $rc ]] && source "$rc"
  done
fi

# 13. Less intrusive bell
set bell-style visible

###############################################################################
# ALM - Autonomous Local Manager Integration
###############################################################################

# The ALM CLI is provided as a standalone script at /opt/alm/bin/alm
# This section integrates it with the shell environment

# Ensure ALM bin directory is in PATH (already added above, but verify)
if [[ -d "/opt/alm/bin" ]] && [[ ":$PATH:" != *":/opt/alm/bin:"* ]]; then
  export PATH="/opt/alm/bin:$PATH"
fi

# Interactive registration check on login
# This runs once per shell session to detect if device needs registration
if [[ $- == *i* ]] && [[ -z "$ALM_REG_CHECK_DONE" ]]; then
  export ALM_REG_CHECK_DONE=1

  # Only proceed if ALM CLI is available and Docker is running
  if command -v alm >/dev/null 2>&1 && command -v docker >/dev/null 2>&1; then
    # Silently check if init container is running (device needs registration)
    _alm_suffix="arm64"
    [[ "$(uname -m)" == "x86_64" || "$(uname -m)" == "amd64" ]] && _alm_suffix="amd64"

    _alm_init_running=$(docker ps --filter "name=alm_init_${_alm_suffix}" --filter "status=running" -q 2>/dev/null)
    _alm_main_running=$(docker ps --filter "name=alm_${_alm_suffix}" --filter "status=running" -q 2>/dev/null)

    # If init is running but main is not, device needs registration
    if [[ -n "$_alm_init_running" && -z "$_alm_main_running" ]]; then
      echo ""
      echo "╔════════════════════════════════════════════════════════════════════╗"
      echo "║  🚀 ALM Device Registration Required                               ║"
      echo "╚════════════════════════════════════════════════════════════════════╝"
      echo ""
      echo "Run: alm register"
      echo ""

      # Optionally auto-start registration (uncomment to enable)
      # alm register
    fi

    # Clean up temporary variables
    unset _alm_suffix _alm_init_running _alm_main_running
  fi
fi
